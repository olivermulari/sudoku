{"version":3,"sources":["scripts/check.js","scripts/options.js","scripts/emptyTiles.js","scripts/generator.js","components/Tile.js","components/ButtonTile.js","components/OptionsRow.js","components/Board.js","scripts/randomize.js","components/Game.js","App.js","index.js"],"names":["isComplete","board","flat","filter","val","length","isValid","rowsValid","every","row","arrayIsValid","colsValid","arr","i","push","getColumn","getColumns","col","boxesValid","getBox","getBoxes","box","noZeros","Array","from","Set","map","x","y","r","c","options","rowArr","splice","colArr","boxArr","boxIndex","concat","forbiddenValues","removeValues","amount","r1","Math","floor","random","r2","r3","removeValueFrom","tryRemoveThreeValuesPerRow","removeRandomValue","removeEasiestValue","copy","fill","sorted","sort","l","removable","toRemove","generate","SudokuCreate","maxNum","iterations","numSet","sudokuArray","horizontalBoxSize","verticalBoxSize","placeNumber","num","randomSafeIndex","lastRowIndex","lastRow","rowsToCheck","safeIndexes","horizontalBoxesUsed","horizontalBox","indexOf","undefined","boxesUsed","boxSafe","index","indexBox","indexInLastRow","rowLen","columnSafe","rowIndex","max","findSafeIndex","workingArray","shift","console","log","Tile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleHover","setState","hover","state","toggleActive","active","toggleFocus","focus","renderHover","isStatic","linkStyle","backgroundColor","style","displayOptions","onDisplayOptions","id","isSelected","static","pStyle","cursor","margin","position","top","left","transform","value","class","react_default","a","createElement","className","confiqClassName","onClick","assign","onMouseOver","onMouseOut","onMouseUp","onMouseDown","onFocus","React","Component","ButtonTile","color","button","setValue","selected","width","size","height","OptionsRow","tileSize","_this2","tiles","src_components_ButtonTile","key","Board","mapStaticBoard","showOptions","tile","newBoard","checkAnswer","randomize","incorrectTiles","init","setGameBackground","tileIsCorrect","rowValid","colValid","boxValid","tileIsValid","isCompleted","updateIncorrectTiles","incorrectIndex","findIndex","tileCheck","right","bottom","borderWidth","borderStyle","borderColor","confiqColor","confiqBorders","_this3","src_components_Tile","confiqHelperClass","getTileStyle","components_OptionsRow","Game","setBackground","isCorrect","gameStyle","headerStyle","padding","textAlign","src_components_Board","App","toggleTileCheck","difficulties","easy","medium","hard","type","src_components_Game","ReactDOM","render","src_App_0","document","getElementById","vh","window","innerHeight","documentElement","setProperty","addEventListener","applyFullWindowHeight"],"mappings":"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","file":"static/js/main.084ded39.chunk.js","sourcesContent":["export function isComplete(board) {\n    return board.flat().filter((val) => val !== 0).length === 81 && isValid(board);\n}\n\nexport function isValid(board) {\n    const rowsValid = board.every((row) => arrayIsValid(row));\n    const colsValid = getColumns(board).every((col) => arrayIsValid(col));\n    const boxesValid = getBoxes(board).every((box) => arrayIsValid(box));\n    return rowsValid && colsValid && boxesValid;\n}\n\nexport function tileIsValid(board, row, col) {\n    const rowValid = arrayIsValid(board[row - 1]);\n    const colValid = arrayIsValid(getColumn(board, col));\n    const boxValid = arrayIsValid(getBox(board, row, col));\n    return rowValid && colValid && boxValid;\n}\n\nfunction arrayIsValid(arr) {\n    const noZeros = arr.filter((val) => val !== 0);\n    return Array.from(new Set(noZeros)).length === noZeros.length;\n}\n\nfunction getColumns(board) {\n    const arr = [];\n    for (let i = 1; i <= 9; i++) {\n        arr.push(getColumn(board, i));\n    }\n    return arr;\n}\n\nexport function getColumn(board, col) {\n    return board.map((row) => row[col - 1]);\n}\n\nfunction getBoxes(board) {\n    const arr = [];\n    for (let row = 1; row <= 9; row += 3) {\n        for (let col = 1; col <= 9; col += 3) {\n            arr.push(getBox(board, row, col));\n        }\n    }\n    return arr;\n}\n\nexport function getBox(board, row, col) {\n    const arr = [];\n    for (let x = 0; x < 3; x++) {\n        for (let y = 0; y < 3; y++) {\n            const r = (row - 1 - (row - 1) % 3) + x;\n            const c = (col - 1 - (col - 1) % 3) + y;\n            arr.push(board[r][c]);\n        }\n    }\n    return arr;\n}\n","import { getBox, getColumn } from './check.js';\n\nexport function options(board, row, col) {\n\n    const options = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    const rowArr = Array.from(board[row - 1]);\n    rowArr.splice(col - 1, 1);\n\n    const colArr = getColumn(board, col);\n    colArr.splice(row - 1, 1);\n\n    const boxArr = getBox(board, row, col);\n    const boxIndex = ((row - 1) % 3) * 3 + ((col - 1) % 3);\n    boxArr.splice(boxIndex, 1);\n\n    const forbiddenValues = (val) => Array.from(new Set(rowArr.concat(colArr).concat(boxArr))).every((x) => x !== val);\n\n    return options.filter(val => forbiddenValues(val));\n}","import { options } from './options.js';\n\nexport function removeValues(board, amount) {\n    tryRemoveThreeValuesPerRow(board);\n\n    const r = amount / 2;\n    for (let i = 0; i < r; i++) {\n        removeRandomValue(board);\n    }\n\n    for (let i = 0; i < amount - r - 16; i++) {\n        removeEasiestValue(board);\n    }\n}\n\nfunction tryRemoveThreeValuesPerRow(board) {\n    for (let i = 1; i <= 9; i++) {\n        const r1 = Math.floor(Math.random() * 9 + 1);\n        const r2 = Math.floor(Math.random() * 9 + 1);\n        const r3 = Math.floor(Math.random() * 9 + 1);\n        removeValueFrom(board, i, r1);\n        removeValueFrom(board, i, r2);\n        removeValueFrom(board, i, r3);\n    }\n}\n\nfunction removeRandomValue(board) {\n    const col = Math.floor(Math.random() * 9 + 1);\n    const row = Math.floor(Math.random() * 9 + 1);\n    removeValueFrom(board, row, col);\n}\n\nfunction removeEasiestValue(board) {\n\n    const copy = Array(9).fill(Array(9).fill(0));\n\n    for (let r = 1; r <= 9; r++) {\n        for (let c = 1; c <= 9; c++) {\n            if (board[r - 1][c - 1] !== 0) {\n                copy[r - 1][c - 1] = [r, c, options(board, r, c)];\n            }\n        }\n    }\n\n    const sorted = copy.flat().filter((x) => x !== 0)\n                      .sort((l, r) => l[2].length - r[2].length);\n    if (sorted[0]) {\n        const removable = sorted.filter((x) => x[2].length === sorted[0][2].length);\n        const rand = Math.floor(Math.random() * removable.length);\n        const toRemove = removable[rand];\n        removeValueFrom(board, toRemove[0], toRemove[1]);\n    }\n}\n\nfunction removeValueFrom(board, row, col) {\n    board[row - 1][col - 1] = 0;\n}","export function generate() {\n    return SudokuCreate(9, 0);\n}\n\nfunction SudokuCreate(maxNum, iterations) {\n    //generate number set\n    let numSet = [];\n    let sudokuArray = [];\n\n    //populates number set and files sudoku with the rows and columns it needs\n    for (let i = 1; i <= maxNum; ++i) {\n        numSet.push(i);\n        sudokuArray.push(new Array(maxNum));\n    }\n\n    //size of sub boxes, figure out more dynamic way to set this\n    let horizontalBoxSize = 3,\n        verticalBoxSize = maxNum === 9 ? 3 : 2;\n\n    //find random number from 0 to max number, expludes max\n    function getRandomInt(max) {\n        return Math.floor(Math.random() * max);\n    }\n\n    //places numbers in the sudoku array\n    function placeNumber(num, arr) {\n        let lastRowIndex = arr.length - 1, //the index of the last row in the working array\n            lastRow = arr[lastRowIndex], //the reference to the last row\n            rowsToCheck = lastRowIndex % verticalBoxSize, //find what row of the sub box we are in vertically\n            safeIndexes = [], //find which column is save to put a number in to\n            randomSafeIndex; //pick one of the columns to place the number into from the safeIndexes array\n\n        //used to find a safe column to place the number in the current row\n        function findSafeIndex(boxesUsed) {\n            //looks at previous rows if inside the sub box to see if the current number can be placed in the sub box\n            function boxSafe(index) {\n                let indexBox = Math.floor(index / horizontalBoxSize);//finds which sub box the current index is in\n                if (boxesUsed.indexOf(indexBox) >= 0) {//checks to see if the current index's sub box has already been used\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n\n            //loop through the current row to find a safe place to put the number\n            for (let indexInLastRow = 0, rowLen = lastRow.length; indexInLastRow < rowLen; ++indexInLastRow) {\n                let columnSafe = true; //assume the current column is safe\n\n                //make sure the current number isn't already used in this column\n                for (let rowIndex = arr.length - 1; rowIndex >= 0; --rowIndex) {\n                    if(arr[rowIndex][indexInLastRow] === num) {\n                        columnSafe = false;\n                    }\n                }\n\n                //make sure current index is empty, column is safe, and that current box is safe\n                if(lastRow[indexInLastRow] === undefined && columnSafe && boxSafe(indexInLastRow)) {\n                    safeIndexes.push(indexInLastRow);\n                }\n            }\n\n            //return a safe index to be used for the current number\n            return safeIndexes[getRandomInt(safeIndexes.length)];\n        }\n\n        let horizontalBoxesUsed = []; //records which sub box has been used, in the current sub box row\n\n        //if we are not if the first row of the sub box, loop through the other rows to see which subboxes have been used\n        if (rowsToCheck > 0) {\n            for (let i = rowsToCheck; i > 0; --i) {\n                let horizontalBox = Math.floor(arr[lastRowIndex - i].indexOf(num) / horizontalBoxSize);\n                horizontalBoxesUsed.push( horizontalBox );\n            }\n        }\n\n        //get a safe index to put the number in to the row\n        randomSafeIndex = findSafeIndex(horizontalBoxesUsed);\n\n        //if there are no safe indexs return the number\n        if(randomSafeIndex === undefined) {\n            return num;\n        } else {//else if there are safe indexs add the number to an index in the row and return true\n            lastRow[randomSafeIndex] = num;\n            return true;\n        }\n    }\n\n    //loop through the numbers to set them in the sudoku\n    for (let i = numSet.length - 1; i >= 0; --i) {\n        let workingArray = [];//holds the rows we are currently working with and/or have already wored with\n        let possible = true;//is the sudoku even possible?\n        while (sudokuArray.length > 0) {//while there are rows in the sudokuArray have have been been processed keep looping\n            workingArray.push(sudokuArray.shift());//add a row to the working array from the sudoku array\n\n            possible = placeNumber(numSet[i], workingArray);//place the current working number in to the working array, to find out if the sudoku puzzle is possible\n\n            if (possible !== true) {//if its not possible generate a new sudoku puzzle\n                return SudokuCreate(maxNum, iterations + 1);\n            }\n        }\n\n        //make the sudoku array equal to the working array when we're done\n        sudokuArray = workingArray;\n    }\n\n    console.log(\"Sudoku created in \" + iterations + \" iterations\")\n    return sudokuArray;//return our array to start to do some sudoku\n}","import React from 'react';\nimport './Tile.css';\n\nclass Tile extends React.Component {\n  constructor(props) {\n    console.log(\"tile constructed\")\n    super(props);\n    this.row = this.props.id[0]\n    this.col = this.props.id[1]\n    this.state = {\n      isStatic: this.props.static[this.row - 1][this.col - 1],\n      hover: false,\n      active: false,\n      focus: false,\n      pStyle: {\n        cursor: this.props.static[this.row - 1][this.col - 1] ? 'default' : 'pointer',\n        margin: 0,\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)'\n      },\n    }\n  }\n\n  // Trying to implement hover and focus\n  toggleHover = () => {\n    this.setState({hover: !this.state.hover})\n  }\n\n  toggleActive = () => {\n    this.setState({active: !this.state.active})\n  }\n\n  toggleFocus = () => {\n    this.setState({focus: !this.state.focus})\n  }\n\n  renderHover = () => {\n    if (this.state.isStatic) {\n      return {};\n    } else {\n      let linkStyle = {backgroundColor: this.props.style.backgroundColor};\n      if (this.state.hover) {\n        linkStyle = {backgroundColor: 'green'}\n      } else if (this.state.active) {\n        linkStyle = {backgroundColor: 'green'}\n      } else if (this.state.focus) {\n        linkStyle = {backgroundColor: 'green'}\n      }\n      return linkStyle\n    }\n  }\n  \n  // Options bar to select tiles value\n  displayOptions = () => {\n    if (!this.state.isStatic) {\n      this.props.onDisplayOptions(this.props.id, this.props.isSelected)\n    }\n  }\n\n  confiqClassName() {\n    if (this.state.isStatic || this.props.value === 0) {\n      return 'tile'\n    } else {\n      return 'tile ' + this.props.class\n    }\n  }\n\n  render() {\n    if (this.row === 1 && this.col === 1) {\n      console.log(\"tile render\");\n    }\n    return (\n      <div \n        className={this.confiqClassName()}\n        onClick={this.displayOptions}\n        // combinign two style objects into a new empty object\n        style={Object.assign({}, this.props.style, this.renderHover())}\n        onMouseOver={this.toggleHover} \n        onMouseOut={this.toggleHover} \n        onMouseUp={this.toggleActive} \n        onMouseDown={this.toggleActive} \n        onFocus={this.toggleFocus}>\n        <p className=\"noselect\" style={this.state.pStyle}>{\n          this.props.value === 0 ? '' : this.props.value\n        }</p>\n      </div>\n    )\n  }\n}\n\nexport default Tile;","import React from 'react';\nimport './ButtonTile.css';\nimport './Tile.css';\n\nclass ButtonTile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.value = this.props.value;\n        this.style = {\n            width: `${this.props.size}px`,\n            height: `${this.props.size}px`\n        }\n        this.pStyle = {\n            cursor: 'pointer',\n            margin: 0,\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)'\n        }\n        this.state = {\n            hover: false,\n        }\n    }\n\n    toggleHover = () => {\n        this.setState({hover: !this.state.hover})\n    }\n\n    renderHover = () => {\n        let linkStyle = {backgroundColor: this.style.backgroundColor};\n        if (this.state.hover) {\n          linkStyle = {backgroundColor: 'white', color: 'black'}\n        }\n        return linkStyle\n    }\n\n    button = () => (\n        <div\n        onClick={this.setValue}\n        className=\"tile-button\"\n        style={Object.assign({}, this.style, this.renderHover())}\n        onMouseOver={this.toggleHover} \n        onMouseOut={this.toggleHover} \n        onMouseUp={this.toggleHover} \n        onMouseDown={this.toggleHover} \n        onFocus={this.toggleHover}>\n            <p className=\"noselect\" style={this.pStyle}>{this.value}</p>\n        </div>\n    );\n\n    setValue = () => {\n        this.props.setValue(this.value, this.props.selected)\n    }\n\n    render() {\n        return this.button()\n    }\n}\n\nexport default ButtonTile;","import React from 'react';\nimport ButtonTile from './ButtonTile';\n\nclass OptionsRow extends React.Component {\n    constructor(props) {\n        super(props);\n        this.style = {\n            margin: '15px auto 0 auto',\n            backgroundColor: 'rgb(200, 0, 0)',\n            width: `${this.props.tileSize * 9}px`,\n            height: `${this.props.tileSize}px`\n        }\n    }\n\n    setValue = (value, selected) => {\n        this.props.setValue(value, selected)\n    }\n\n    render() {\n        let id = 0;\n        return (\n            <div style={this.style}>{\n                this.props.tiles.map((num) => {\n                    if (id === 9) id = 0;\n                    id++;\n                    return (\n                    <ButtonTile\n                    id={[this.props.id, id]}\n                    key={[this.props.id, id]}\n                    selected={this.props.selected}\n                    value={num}\n                    setValue={this.setValue}\n                    size={this.props.tileSize}/>\n                )})\n            }\n            </div>\n        )\n    }\n}\n\nexport default OptionsRow;","import React from 'react';\nimport { randomize } from '../scripts/randomize.js';\nimport Tile from './Tile';\nimport OptionsRow from './OptionsRow';\nimport './Board.css';\nimport { isComplete, tileIsValid, isValid } from '../scripts/check.js';\n\nclass Board extends React.Component {\n    constructor(props) {\n        console.log(\"Board constructed!\")\n        super(props);\n        this.board = randomize();\n        this.static = this.mapStaticBoard(this.board);\n        this.state = {\n            tiles: this.board,\n            selected: [0, 0],\n            incorrectTiles : [],\n            showOptions: false,\n            size: 30 //px\n        }\n        this.init()\n    }\n\n    init() {\n        // check initially if game happens to be correct\n        this.props.setGameBackground(isValid(this.state.tiles), isComplete(this.state.tiles))\n    }\n\n    mapStaticBoard = (arr) => {\n        const newArr = arr.map((row) => row.map((val) => val !== 0));\n        return newArr;\n    }\n\n    displayOptions = (id, isSelected) => {\n        this.setState({\n            showOptions: !isSelected,\n            selected: id\n        }, () => {\n            if (isSelected) {\n                this.setValue(0, id);\n            }\n        })\n    }\n\n    setValue = (value, tile) => {\n        if (!this.isSelected(0, 0)) {\n            const newBoard = this.state.tiles;\n            newBoard[tile[0] - 1][tile[1] - 1] = value;\n            this.setState({\n                showOptions: false,\n                selected: [0, 0],\n                tiles: newBoard\n            }, () => {\n                this.checkAnswer(tile)\n            })\n        }\n    }\n\n    checkAnswer(tile) {\n        const tileIsCorrect = tileIsValid(this.state.tiles, tile[0], tile[1])\n        const isCompleted = isComplete(this.state.tiles)\n        this.props.setGameBackground(tileIsCorrect, isCompleted)\n        this.updateIncorrectTiles(tile, !tileIsCorrect)\n    }\n\n    updateIncorrectTiles(tile, push) {\n        const index = this.incorrectIndex(tile[0], tile[1])\n        if (push) {\n            if (index === -1) {\n                this.state.incorrectTiles.push(tile)\n            }\n        } else {\n            if (index !== -1) {\n                this.state.incorrectTiles.splice(index, 1)\n            }\n        }\n    }\n\n    // returns -1 if is not in incorrect tiles\n    incorrectIndex(row, col) {\n        return this.state.incorrectTiles.findIndex((x) => x[0] === row && x[1] === col)\n    }\n\n    isSelected(row, col) {\n        return this.state.selected[0] === row && this.state.selected[1] === col\n    }\n\n    confiqColor(row, col) {\n        const selectedColor = () => this.isSelected(row, col) ? 'green' : '' // no property\n        const staticColor = () => this.static[row - 1][col - 1] ? 'rgb(230, 230, 230)' : selectedColor()\n        return staticColor()\n    }\n\n    confiqHelperClass(row, col) {\n        if (this.props.tileCheck) {\n            return this.incorrectIndex(row, col) === -1 ? 'correct-tile' : 'incorrect-tile'\n        } else {\n            return '';\n        }\n    }\n\n    confiqBorders(row, col) {\n        const top = row % 3 === 1 ? 'black' : '#ccc'\n        const right = col % 3 === 0 ? 'black' : '#ccc'\n        const bottom = row % 3 === 0 ? 'black' : '#ccc'\n        const left = col % 3 === 1 ? 'black' : '#ccc'\n        const borderObj = {\n            borderWidth: '1px',\n            borderStyle:  'solid',\n            borderColor:  `${top} ${right} ${bottom} ${left}`\n        }\n        return borderObj\n    }\n\n    getTileStyle(row, col) {\n        const style = {\n            backgroundColor: this.confiqColor(row, col),\n            cursor: this.static[row - 1][col - 1] ? 'default' : 'pointer',\n            width: `${this.state.size}px`,\n            height: `${this.state.size}px`,\n        }\n        return Object.assign(style, this.confiqBorders(row, col));\n    }\n  \n    render() {\n        console.log(\"board render\")\n        let row = 1;\n        let col = 0;\n        const board = (\n            <div id=\"board\" style={this.style}>{\n                this.state.tiles.flat().map((value) => {\n                    if (col === 9) {\n                        col = 0;\n                        row++;\n                    }\n                    col++;\n                    return(\n                    <Tile \n                    id={[row, col]}\n                    key={[row, col]}\n                    class={this.confiqHelperClass(row, col)}\n                    style={this.getTileStyle(row, col)}\n                    static={this.static}\n                    isSelected={this.isSelected(row, col)}\n                    onDisplayOptions={this.displayOptions}\n                    value={value}\n                    tileSize={this.state.size}/>\n                )})\n            }</div>\n        )\n        const options = (\n            <div>\n                <OptionsRow\n                id={10}\n                key={10}\n                setValue={this.setValue}\n                selected={this.state.selected}\n                tiles={[1, 2, 3, 4, 5, 6, 7, 8, 9]} \n                tileSize={this.state.size} />\n            </div>\n        )\n\n        if (this.state.showOptions) {\n            return (\n                <div>\n                    {board}\n                    {options}\n                </div>\n            )\n        } else {\n            return board\n        }\n    }\n}\n\nexport default Board;\n","import { removeValues } from './emptyTiles';\nimport { generate } from './generator';\n\nexport function randomize() {\n    const board = generate();\n    removeValues(board, 30);\n    return board;\n}","import React from 'react';\nimport './Game.css';\nimport Board from './Board';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          isCorrect: true,\n          isCompleted: false\n        }\n        this.headerStyle = {\n          padding: '30px 0 0 0',\n          textAlign: \"center\"\n        }\n        this.state = {\n            isCorrect: true\n        }\n    }\n\n    setBackground = (tileIsCorrect, isCompleted) => {\n        this.setState({isCorrect: tileIsCorrect}, () => {\n            this.setState({isCompleted: isCompleted})\n        })\n    }\n\n    gameStyle = () => {\n        if (this.state.isCorrect) {\n            if (this.state.isCompleted) {\n                return {backgroundColor: 'green'}\n            } else {\n                return {backgroundColor: 'lightblue'}\n            }\n        } else {\n          return {backgroundColor: 'lightblue'} //red\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"sudoku-game\" style={this.gameStyle()}>\n                <h1 style={this.headerStyle}>\n                    {this.state.isCompleted ? 'Completed!' : 'Sudoku'}\n                </h1>\n                <Board \n                tileCheck={this.props.tileCheck}\n                setGameBackground={this.setBackground}/>\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.difficulties = {\n      \"easy\": 0,\n      \"medium\": 1,\n      \"hard\": 2\n    }\n    this.state = {\n      tileCheck: false\n    }\n  }\n\n  toggleTileCheck = () => {\n    const state = this.state.tileCheck\n    this.setState({tileCheck: !state})\n  }\n  \n  render() {\n    return (\n      <div id=\"app\">\n        <div id=\"settings\">\n          Tile Helper: <input type=\"checkbox\" id=\"myCheck\"  onClick={this.toggleTileCheck}/>\n        </div>\n        <Game tileCheck={this.state.tileCheck}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\napplyFullWindowHeight();\n\nfunction applyFullWindowHeight() {\n    const vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n    window.addEventListener('resize', () => {\n      const vh = window.innerHeight * 0.01;\n      document.documentElement.style.setProperty('--vh', `${vh}px`);\n    });\n}\n"],"sourceRoot":""}